---
layout: post
title:  "Blog.init()"
date:   2015-09-23 13:19:55
author: Brandon Cole
categories: Blog
tags:	blog meta welcome
---

Well, here we go.  Time to enter the world of blogs.

### Welcome!

I'm excited to document and share my thoughts, experiences, learnings, ramblings, and whatever else I feel appropriate.

### Why did I make this blog?

I've read other blogs before.  We all have.  We have a problem or something we want to learn about, we Google it, and read.  There's so much information available, free to read, and it's easy to forget that this content is *generated by actual people*.  People share what they have learned, post tutorials, and help others.  I, as a [young professional just entering a new career][about], feel the obligation to (hopefully) start helping others as they have helped me.

I want to give back.

Beyond that, I believe this will help myself gain clarity on the concepts I post.  Putting ideas in ink - always a good way to reinforce what you think you know.

So enough of that.  This is a tech blog, let's make this technical.

### Tech Specs

I'm planning (for now) to maintain this blog using [GitHub Pages][gh-pages] and [Jekyll][jekyll].

That setup in itself has been fun.  Honestly.  I've already faced some interesting technical challenges, and I haven't even started writing about technical challenges.

So let's make this a sort of meta post; I want to share some of my experiences in setting up this very site.

#### Jekyll

Static pages.  That's what Jekyll is about.  Who knew you could deliver a full-functioning blog with all sorts of neat features statically.  To clarify, when I say static, I mean no back-end code, no databases, nothing.  Simple HTML pages are delivered to your browser for you to read what you are reading.

That's pretty neat.

There's tons of information on Jekyll already, so I won't re-tutorialize the setup, instead I'll simply point you to their well-written [documentation guide][jekyll-docs].  Check it out!

#### Jekyll Themes

The default Jekyll theme is pretty clean, and very open to custom styling.  I decided to get inspired by other [Jekyll themes][jekyll-themes], and used a different theme as a starting point.  [Centrarium][centrarium], by fellow RIT alumni [Ben Centra][ben], is the theme I am using for now and will probably continue to tweak and use.  Nice work, Ben!

He's got some other cool technologies integrated with the theme, including [Bourbon][bourbon] and [Neat][neat] styling, and a cool Jekyll plugin called [jekyll-archives][jekyll-archives].  More on this and integration, next.

#### GitHub Integration

GitHub offers a service called [GitHub Pages][gh-pages].  Every account is allotted one page, and every project is allotted one project page.  There's slight differences between the two in terms of your git repository structure.  In short, a project page utilizes a separate branch <code>gh-pages</code>, while an account page simply looks at the <code>master</code> branch.

Here's the challenge I faced.

Ben's inclusion of [jekyll-archives][jekyll-archives] is awesome, and provides many useful features such as improved tagging and page generation for tags and categories.  However, GitHub Pages uses their own safe-mode of <code>jekyll build</code> that disables plugins.  Therefore, a simple push to my master branch on my GitHub repository would not generate the archive pages and was insufficient.  After much research, I've found a solution I can accept.

I've created a second branch called <code>development</code> that I will use for my Jekyll files, templates, etc.  The Jekyll output, which goes to a folder called <code>_site</code>, will be what lives in the <code>master</code> branch of my repo, since GitHub Pages is happy to serve already static pages (no <code>jekyll build</code> needed).

Here's how development looks on my local machine.

<pre><code class="md">.
├── development
|   ├── _config.yml
|   └── ... (jekyll files)
├── master
|   ├── index.html
|   ├── ... (static files)
</code></pre>

My development folder points strictly to the <code>development</code> branch, and master simply to the <code>master</code> branch.  I do all my work on the development branch.  When I'm ready to push something new to master, I do a <code>jekyll build</code> and copy the contents of <code>_site</code> in development to master.

To simplify this deploy process, I've written a simple shell script.  You can [check it out][deploy-script] on this site's repository.  After tweaking the site or adding a new post, I can verify it via <code>jekyll serve</code> in the development folder, and when I'm sure things look good, I execute a simple <code>./_deploy.sh</code> to push to master and to [bcole.github.io][home].

### Final Thoughts

I'm excited to start writing some actual content.  Stay tuned for updates, subscribe via RSS (do people actually use RSS?), and leave comments below!


[jekyll]: http://jekyllrb.com
[jekyll-docs]: https://jekyllrb.com/docs/home/
[jekyll-themes]: http://jekyllthemes.org/
[jekyll-archives]: https://github.com/jekyll/jekyll-archives
[bourbon]: http://bourbon.io/
[neat]: http://neat.bourbon.io/
[centrarium]: https://github.com/bencentra/centrarium
[ben]: http://bencentra.com/
[gh-pages]: https://pages.github.com/
[deploy-script]: https://github.com/bcole/bcole.github.io/blob/development/_deploy.sh
[home]: /
[about]: /about