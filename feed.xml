<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brandon Cole</title>
    <description>A technology blog, by Brandon Cole
</description>
    <link>http://bcole.github.io/</link>
    <atom:link href="http://bcole.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 22 Oct 2015 01:43:18 -0700</pubDate>
    <lastBuildDate>Thu, 22 Oct 2015 01:43:18 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>HTML5 Developer Conference</title>
        <description>&lt;p&gt;This week, I was lucky to be able to attend the &lt;a href=&quot;http://html5devconf.com/&quot;&gt;HTML5 Developer Conference&lt;/a&gt; in San Francisco.  Here’s a few takeaways that I’d like to share!&lt;/p&gt;

&lt;h3 id=&quot;module-based-design&quot;&gt;Module Based Design&lt;/h3&gt;

&lt;p&gt;This was probably my favorite talk of the day.  It focused on best practices for design of modern web applications and utilizing reusable components.&lt;/p&gt;

&lt;p&gt;The full talk is titled &lt;a href=&quot;http://html5devconf.com/speakers/mike_kivikoski.html#session&quot;&gt;Evolving Web Applications with Module Based Design Components&lt;/a&gt; and was given by &lt;a href=&quot;http://www.mikekivikoski.com/&quot;&gt;Mike Kivikoski&lt;/a&gt;, a Designer and Developer at &lt;a href=&quot;http://cantina.co/&quot;&gt;Cantina&lt;/a&gt; in Boston.&lt;/p&gt;

&lt;p&gt;He started out with some examples of good module based design, like Netflix.  Netflix has a standardized widget to display a list of TV shows or movies, and it is reused in multiple places across the site.  The important thing to note is the consistency.&lt;/p&gt;

&lt;p&gt;However, it is not enough to simply have a consistent UI.  It should also be maintainable.&lt;/p&gt;

&lt;p&gt;He gave an example of an airline site which he enjoyed using.  The buttons and styles were consistent.  However, he looked into the source code and noticed that different classes were being used for titles that had the same exact styling.  This is bad!  It means that if a change wants to be made (ex: change the title font size), this has to be changed in every CSS class used by titles.  This violates the &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;DRY principle&lt;/a&gt; (don’t repeat yourself!), and it’s not maintainable!&lt;/p&gt;

&lt;p&gt;He ended with an example of an even worse site, where there wasn’t even consistency.  Buttons looked different, forms had different styling, and so on.  This is an obvious no-no.&lt;/p&gt;

&lt;p&gt;But back to the good design.  What should we do?&lt;/p&gt;

&lt;h4 id=&quot;good-design---tips--tricks&quot;&gt;Good Design - Tips &amp;amp; Tricks&lt;/h4&gt;

&lt;p&gt;Mike gave a &lt;em&gt;lot&lt;/em&gt; of tips &amp;amp; tricks in this talk to keep in mind while designing your CSS and website.  I’ll pull out a few that I especially thought were useful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Use CSS classes, not IDs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Classes are reusable, and this approach helps promote a component based design and dissuades styling for “one-off’s” (more on this later).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) CSS classes should do one thing and do it well&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Creating monolith classes that do everything you need in one shot may seem simple at first, but it’s not a good approach.  Again, this will impede our desire to have reusable CSS classes.&lt;/p&gt;

&lt;p&gt;As an example, consider a sandwich.  It would be poor design to just create a sandwich style, as this isn’t very reusable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/html5devconf/single-responsibility-principle-1.jpg&quot; alt=&quot;Single Responsibility Principle (bad)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead, we want smaller components that are responsible for one piece of the design.  They should do one thing, and do it well!&lt;/p&gt;

&lt;p&gt;Here’s a better approach:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/html5devconf/single-responsibility-principle-2.jpg&quot; alt=&quot;Single Responsibility Principle (good)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you think about it, this isn’t really anything brand-new for software design.  Cohesive design is a practice across all software development.  However, I think it can be overlooked when it comes to CSS design.  I hadn’t really given this idea too much thought before Mike’s talk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Don’t make one-off changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When marketing comes with a new requirement, don’t create the CSS class &lt;code&gt;.headline-one-with-top-margin-for-marketing&lt;/code&gt;.  Create components!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.headline-one&lt;/code&gt;, &lt;code&gt;.top-margin&lt;/code&gt;, and &lt;code&gt;.marketing&lt;/code&gt; (if required) are the classes you should create instead.&lt;/p&gt;

&lt;p&gt;This is really just another reiteration of following the &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;DRY principle&lt;/a&gt; and will make for a maintainable design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Use variables, and name variables appropriately&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A good example is colors; don’t hardcode color values in your classes.  And when assigning colors to a variable, take care to name the variable appropriately.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@gray&lt;/code&gt;, &lt;code&gt;@dark-gray&lt;/code&gt;, &lt;code&gt;@extra-dark-gray&lt;/code&gt;, &lt;code&gt;@super-extra-dark-gray&lt;/code&gt;, and so on.. is unrealistic.  Use a number scheme instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@gray-100&lt;/code&gt;, &lt;code&gt;@gray-200&lt;/code&gt;, &lt;code&gt;@gray-300&lt;/code&gt;, …, &lt;code&gt;@gray-900&lt;/code&gt;, this is a much better approach (and follows the font-weight standard).&lt;/p&gt;

&lt;p&gt;You could also do this for colors that you don’t want to explicitly name.  Example: &lt;code&gt;@primary-100&lt;/code&gt;, &lt;code&gt;@primary-200&lt;/code&gt;, &lt;code&gt;@primary-300&lt;/code&gt;, and so on for your primary theme color.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) CSS file organization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS files should be named according to component, not based on the page!&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Bad example:&lt;/u&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;md&quot;&gt;.
├── styles
|   ├── homePage.css
|   ├── aboutPage.css
|   ├── contactPage.css
|   ├── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;u&gt;Good example:&lt;/u&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;md&quot;&gt;.
├── styles
|   ├── alerts.css
|   ├── buttons.css
|   ├── forms.css
|   ├── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will help enforce that reusable component based design that we’ve been talking about.  Organizing based on location makes it much harder to reuse that style in another part of the site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Code Reviews&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mike finished off the talk with tips on how to be more successful as a team.&lt;/p&gt;

&lt;p&gt;Code reviews are a must, even for styles.  A few things this can help with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Check that variables are used (appropriately).&lt;/li&gt;
  &lt;li&gt;Check syntax, and check that naming standards are used and code is consistent.&lt;/li&gt;
  &lt;li&gt;Check that components are reusable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;7) Style Guides&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Documentation is normally not the most enjoyed part of a developer’s life, but it is crucial!&lt;/p&gt;

&lt;p&gt;In the case of module based design, it can clearly show the rest of your team the components that are available for use.&lt;/p&gt;

&lt;p&gt;There are plenty of tools that will help generate these style guides for you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://warpspire.com/kss/&quot;&gt;KSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://patternlab.io/&quot;&gt;Pattern Lab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fbrctr.github.io/&quot;&gt;Fabricator&lt;/a&gt; - and here’s a &lt;a href=&quot;http://fbrctr.github.io/demo/&quot;&gt;demo&lt;/a&gt; of a style guide&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He also mentions not to let this style guide die.  Keep it up-to-date and let it evolve!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;One final topic I want to discuss on this talk is &lt;strong&gt;testing&lt;/strong&gt;.  I had a concern while hearing this talk that by putting styles into reused classes, testing could become a pain.  If you want to change the style of some text on the homepage, you go and change the style.  But then what if that style is reused, and some other page breaks?&lt;/p&gt;

&lt;p&gt;Apparently, I wasn’t the only one with that concern, as it was brought up during Q&amp;amp;A.  Mike’s answer was two-fold.  First, he admitted that of course some regression testing will have to be done to ensure that the change isn’t breaking other parts of the site.  The other point he brought up is that the benefit of this module based design is that &lt;em&gt;components “play well” together&lt;/em&gt;.  Components should be compatible with other components (without breaking).&lt;/p&gt;

&lt;p&gt;In other words, it shouldn’t be possible that changing a component’s style and testing it on the homepage would work, but would break on another part of the site.  This all relates back to his point about avoiding one-off changes as well, as you can better prevent odd edge cases that happen only on certain pages.&lt;/p&gt;

&lt;p&gt;So, take that with a grain of salt.  A perfect implementation of module based design wouldn’t introduce this sort of bug, but things don’t always execute perfectly, do they? ;)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This was a very potent talk with a lot of content, but I hope I summarized out the core points on this one!&lt;/p&gt;

&lt;h3 id=&quot;localization&quot;&gt;Localization&lt;/h3&gt;

&lt;p&gt;I actually had no idea what this talk would be about, based on it’s title: &lt;a href=&quot;http://html5devconf.com/speakers/leith_abdulla.html#session&quot;&gt;How Automation Can Open Up Your Product to a Billion More Users*&lt;/a&gt;.  The asterisk ended up signifying:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;* if you localize all the languages …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The full slide deck is available here: &lt;a href=&quot;https://eleith.com/slides/automate-i18n/&quot;&gt;https://eleith.com/slides/automate-i18n/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of the core points I took out of this talk:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) How to determine the user’s language&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This can be difficult, and depends on the specific situation.  In general, use a combination of strategies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User’s preference data (if the user is logged in).&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;Accept-Language&lt;/code&gt; header in the request (this is based on browser preferences).&lt;/li&gt;
  &lt;li&gt;IP-based (using a service like &lt;a href=&quot;https://www.maxmind.com&quot;&gt;MaxMind&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google was given as an example of a good experience.  You can travel to Japan, the site would load in Japanese, but Google would offer a message saying “we think you might prefer to read this in English.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) How to broadcast the language support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is important to help ensure that user is given appropriate content.  It can also help search engines pick the right results.&lt;/p&gt;

&lt;p&gt;Use the HTML standard (&lt;code&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&lt;/code&gt;) or use subdomains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;es.coursera.org&lt;/li&gt;
  &lt;li&gt;zh.coursera.org&lt;/li&gt;
  &lt;li&gt;pt.coursera.org&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3) Translation concerns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There’s more to consider than simply translating words.  For example, the English word “back” could be translated to the meaning “previous”, or to the part of the human body.  Context is important.&lt;/p&gt;

&lt;p&gt;Format can also change.  For example, dates, times and numbers (like the thousands separator), may all need to be presented in different ways depending on the locale.&lt;/p&gt;

&lt;p&gt;Solving this depends on the importance of quality.  Automated translation services, like Google Translate, are improving over time.  But they still aren’t perfect.  If high quality translation content is necessary, it might be more appropriate to use a more manual process.&lt;/p&gt;

&lt;p&gt;Human translators can recognize context better.  You can use outsourcing sites like &lt;a href=&quot;https://www.mturk.com/mturk/welcome&quot;&gt;Amazon’s Mechanical Turk&lt;/a&gt; for this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Not all site content should be translated&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Care needs to be taken to not simply translate the entire website.  Certain content, such as URLs or code snippets, should often not be translated.&lt;/p&gt;

&lt;p&gt;The approach suggested in this talk solved this by abstracting strings out.  Then, at the presentation level, strings were wrapped with a Javascript &lt;code&gt;_t(string)&lt;/code&gt; function call that took care of the translation.  This forces the translation to be more explicit.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: the &lt;code&gt;_t()&lt;/code&gt; function is specific to the custom translation library Coursera created.  View the &lt;a href=&quot;https://eleith.com/slides/automate-i18n/&quot;&gt;slide deck&lt;/a&gt; for more information on their approach.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Localization is important on the internet.  Simply looking at English vs non-English speakers on the internet shows this importance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/html5devconf/english-vs-non-english.png&quot; alt=&quot;English vs. non-English speakers&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;drunk-user-testing&quot;&gt;Drunk User Testing&lt;/h3&gt;

&lt;p&gt;This was definitely one of the most fun talks of the day!  But before you get too excited - No, we didn’t get drunk for this one :(&lt;/p&gt;

&lt;p&gt;The idea behind this type of testing is that (1) your site is simple enough that a drunk user can use it, and (2) drunk users will give more honest feedback.&lt;/p&gt;

&lt;p&gt;There’s actually a website called &lt;a href=&quot;http://theuserisdrunk.com/&quot;&gt;theuserisdrunk.com&lt;/a&gt;, where a UX professional says he will get drunk and test your website while recording the session and providing a full feedback document.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://austinknight.com/drunk-speech-resources/&quot;&gt;Austin Knight&lt;/a&gt; was the presenter for this talk, and he works for &lt;a href=&quot;http://www.hubspot.com/&quot;&gt;HubSpot&lt;/a&gt;.  HubSpot used this service on their homepage and got some valuable feedback.  The screencast video is recorded below - it’s actually quite an entertaining video if you have some time!&lt;/p&gt;

&lt;iframe style=&quot;max-width:100%&quot; width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/osr0rPUyAbY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Austin spent the rest of the talk discussing the possibility of user testing with sober users.&lt;/p&gt;

&lt;h4 id=&quot;challenges&quot;&gt;Challenges&lt;/h4&gt;

&lt;p&gt;There are challenges to consider when setting up user tests.  Often times during user testing, users will give opinions even if they wouldn’t normally have one.  They end up thinking of an opinion to give instead of fully using the product.  This is unnatural.  In addition, feedback can be skewed if questions are leading.&lt;/p&gt;

&lt;h4 id=&quot;solutions&quot;&gt;Solutions&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1) Segment your users&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ask “qualifying questions” that help you ensure that your users who you are testing are in fact your target audience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Iterate the tests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Start with a pilot test that will “test the test.”  This will let you identify any flaws in the test before running it against actual users.&lt;/p&gt;

&lt;p&gt;Then run tests in iterations.  Each iteration really only needs 3-5 users, according to Austin.  Continue this iteration cycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Don’t lead the user&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is important to ask questions that don’t exactly match the implementation.&lt;/p&gt;

&lt;p&gt;Consider these two prompts.  Which is the better phrasing?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Find the job application form and submit it”&lt;/li&gt;
  &lt;li&gt;“Find a job you like and apply for it”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first prompt leads the user by referring to specific implementation terminology (a “form”, a “submit” button).  Asking for behavior is preferred, and will help induce a more natural environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Create a culture of UX at your company&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Everyone is a UX designer.  There should be a sense of ownership from everyone, and the mindset of “oh, it’s that guy’s fault, not mine” shouldn’t exist.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;By following these tips, it is possible to get valuable feedback from every user (not just drunk ones)!&lt;/p&gt;

</description>
        <pubDate>Wed, 21 Oct 2015 16:12:19 -0700</pubDate>
        <link>http://bcole.github.io/conferences/2015/10/21/html5-developer-conference.html</link>
        <guid isPermaLink="true">http://bcole.github.io/conferences/2015/10/21/html5-developer-conference.html</guid>
        
        <category>html</category>
        
        <category>css</category>
        
        <category>conference</category>
        
        <category>notes</category>
        
        <category>design</category>
        
        <category>advice</category>
        
        
        <category>conferences</category>
        
      </item>
    
      <item>
        <title>E2E Testing Strategy</title>
        <description>&lt;p&gt;More tests!  More tests are always better, right?  Let’s reconsider, before answering that.&lt;/p&gt;

&lt;p&gt;Recently, I have been given responsibilities related to end-to-end (E2E) testing for a web application.  The web application is primarily written in &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;, and I am using the &lt;a href=&quot;https://angular.github.io/protractor/#/&quot;&gt;Protractor&lt;/a&gt; testing framework provided by the Angular team to write my tests.&lt;/p&gt;

&lt;p&gt;Now, I come from a testing background of low-level tests.  Unit tests, integration tests, service tests.  I’m new to UI and E2E tests.  When I write unit tests, I write unit tests.  I test positive and negative flows, I try to hit all boundary and edge cases, and so on.  Same for service tests.  And so, when it came time for me to write E2E tests, it made sense to follow that mindset.&lt;/p&gt;

&lt;p&gt;I tried testing every possible permutation of user experience options I could think of, positive flows and the more unlikely negative flows.  The number of permutations grew very, very quickly; multiplying as I found a new option that the user could try.  I was testing a relatively minor feature, and I quickly realized how unmaintainable this was becoming.&lt;/p&gt;

&lt;p&gt;Not only did this stress me out trying to properly set up a test suite of this size, but I was realizing a number of other side effects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Tests had to be frequently maintained.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My tests had to, of course, make assertions to validate what should be displayed on the screen.  I abstracted out assertion values into test data files, so that as I was testing different environments (QA, Prod) or regions (US, UK), it was “easy” to make changes that reflect the given test.&lt;/p&gt;

&lt;p&gt;However, assertions were failing far more often than I expected.  Marketing would change a price value on the screen, experience designers would change the wording of a page, or database tables would simply change over time (as data tends to do in a web app!).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes that didn’t impact the user experience flow were causing my tests to break.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The test data would constantly have to be maintained to account for the web application’s ever-changing state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Tests were becoming brittle.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Besides the changing state of the web application causing tests to fail, user interface tests present some challenges of their own.  There are often additional race conditions or timeout considerations that need to be carefully mitigated in the test to prevent intermittent test failures.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tests that fail intermittently are useless.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You and any team members will start ignoring failed tests, thinking it’s another false positive (and perhaps it is).  A failed test should be taken seriously, and a testing strategy that does not foster that attitude is not benefiting you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Test execution times were too long.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A test suite that takes too long to execute will not be run frequently.  Code ends up being checked in without thorough testing.&lt;/p&gt;

&lt;p&gt;All of these side effects, and more, were hindering our team’s ability to produce quality software.&lt;/p&gt;

&lt;p&gt;So what &lt;strong&gt;&lt;em&gt;should&lt;/em&gt;&lt;/strong&gt; we do?  I’m glad you asked.&lt;/p&gt;

&lt;h3 id=&quot;the-testing-pyramid&quot;&gt;The Testing Pyramid&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/test-pyramid.png&quot; alt=&quot;Testing Pyramid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/bliki/TestPyramid.html&quot;&gt;Martin Fowler&lt;/a&gt; discusses a concept called the Testing Pyramid.  Essentially, there should be more unit tests than service or integration tests, and more of those than UI or E2E tests.&lt;/p&gt;

&lt;p&gt;He mentions the anti-pattern for this, comically referred to as the &lt;a href=&quot;http://watirmelon.com/2012/01/31/introducing-the-software-testing-ice-cream-cone/&quot;&gt;Ice Cream Cone&lt;/a&gt; anti-pattern.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ice-cream-anti-pattern.png&quot; alt=&quot;Ice Cream Cone anti-pattern&quot; style=&quot;max-width: 520px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://watirmelon.com/2012/01/31/introducing-the-software-testing-ice-cream-cone/&quot;&gt;Ice Cream Cone anti-pattern&lt;/a&gt;, which is what I was striving for as I naively took on my E2E testing responsibilities, causes the exact problems outlined above.&lt;/p&gt;

&lt;h3 id=&quot;the-strategy&quot;&gt;The Strategy&lt;/h3&gt;

&lt;p&gt;As tempting as it is, avoid the Ice Cream Cone!  Here’s what I suggest.&lt;/p&gt;

&lt;p&gt;Keep E2E tests focused on the core flows of your application that your users will engage in.  Don’t test for specific content, like text or images.  These can change frequently.  Instead, test for more static items.  Test buttons and links and ensure their behavior is as expected.&lt;/p&gt;

&lt;p&gt;Save your animal-like instincts of software quality with wild test permutations for the lower-level unit and service tests.  It’s much easier to test a wide set of test inputs at the unit level.  Unit tests aren’t dependent on the state of the web application or what is in the database.&lt;/p&gt;

&lt;p&gt;One final benefit I’ll briefly mention is discussed in detail in a &lt;a href=&quot;http://googletesting.blogspot.co.uk/2015/04/just-say-no-to-more-end-to-end-tests.html&quot;&gt;recent blog post&lt;/a&gt; from the Google testing blog.  Taking a step back, what is the point of testing?  To find bugs!  If a high level E2E test fails, it could be caused by any number of problems.  Isolating the buggy code can be quite difficult if a bug is found in an E2E test.  Conversely, a unit test failure isolates the possible buggy code to a much smaller scope.  It is much easier to resolve the bug.&lt;/p&gt;

&lt;h3 id=&quot;so-is-more-testing-always-better&quot;&gt;So, is more testing always better?!&lt;/h3&gt;

&lt;p&gt;That was a trick question, wasn’t it?&lt;/p&gt;

&lt;p&gt;Writing the right kind of tests is what’s important.  Write more unit tests, and limit your end-to-end tests.&lt;/p&gt;

&lt;h3 id=&quot;read-more&quot;&gt;Read More!&lt;/h3&gt;

&lt;p&gt;Please, don’t just take my suggestions without further thought.  There is a large amount of information surfacing, especially recently, on best practices for testing.&lt;/p&gt;

&lt;p&gt;I highly suggest reading &lt;a href=&quot;http://googletesting.blogspot.co.uk/2015/04/just-say-no-to-more-end-to-end-tests.html&quot;&gt;Google’s recent blog post&lt;/a&gt; on E2E testing.  It’s a bit lengthy but it’s worthwhile.&lt;/p&gt;

&lt;p&gt;Martin Fowler’s post on the &lt;a href=&quot;http://martinfowler.com/bliki/TestPyramid.html&quot;&gt;Test Pyramid&lt;/a&gt; is great as well (and it’s a quick read!).&lt;/p&gt;

&lt;p&gt;Let me know if you have any experiences of your own you’d like to share!&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Sep 2015 18:13:15 -0700</pubDate>
        <link>http://bcole.github.io/testing/2015/09/29/e2e-testing-strategy.html</link>
        <guid isPermaLink="true">http://bcole.github.io/testing/2015/09/29/e2e-testing-strategy.html</guid>
        
        <category>testing</category>
        
        <category>e2e</category>
        
        <category>automated</category>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Blog.init()</title>
        <description>&lt;p&gt;Well, here we go.  Time to enter the world of blogs.&lt;/p&gt;

&lt;h3 id=&quot;welcome&quot;&gt;Welcome!&lt;/h3&gt;

&lt;p&gt;I’m excited to document and share my thoughts, experiences, learnings, ramblings, and whatever else I feel appropriate.&lt;/p&gt;

&lt;h3 id=&quot;why-did-i-make-this-blog&quot;&gt;Why did I make this blog?&lt;/h3&gt;

&lt;p&gt;I’ve read other blogs before.  We all have.  We have a problem or something we want to learn about, we Google it, and read.  There’s so much information available, free to read, and it’s easy to forget that this content is &lt;em&gt;generated by actual people&lt;/em&gt;.  People share what they have learned, post tutorials, and help others.  I, as a &lt;a href=&quot;/about&quot;&gt;young professional just entering a new career&lt;/a&gt;, feel the obligation to (hopefully) start helping others as they have helped me.&lt;/p&gt;

&lt;p&gt;I want to give back.&lt;/p&gt;

&lt;p&gt;Beyond that, I believe this will help myself gain clarity on the concepts I post.  Putting ideas in ink - always a good way to reinforce what you think you know.&lt;/p&gt;

&lt;p&gt;So enough of that.  This is a tech blog, let’s make this technical.&lt;/p&gt;

&lt;h3 id=&quot;tech-specs&quot;&gt;Tech Specs&lt;/h3&gt;

&lt;p&gt;I’m planning (for now) to maintain this blog using &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; and &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That setup in itself has been fun.  Honestly.  I’ve already faced some interesting technical challenges, and I haven’t even started writing about technical challenges.&lt;/p&gt;

&lt;p&gt;So let’s make this a sort of meta post; I want to share some of my experiences in setting up this very site.&lt;/p&gt;

&lt;h4 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h4&gt;

&lt;p&gt;Static pages.  That’s what Jekyll is about.  Who knew you could deliver a full-functioning blog with all sorts of neat features statically.  To clarify, when I say static, I mean no back-end code, no databases, nothing.  Simple HTML pages are delivered to your browser for you to read what you are reading.&lt;/p&gt;

&lt;p&gt;That’s pretty neat.&lt;/p&gt;

&lt;p&gt;There’s tons of information on Jekyll already, so I won’t re-tutorialize the setup, instead I’ll simply point you to their well-written &lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;documentation guide&lt;/a&gt;.  Check it out!&lt;/p&gt;

&lt;h4 id=&quot;jekyll-themes&quot;&gt;Jekyll Themes&lt;/h4&gt;

&lt;p&gt;The default Jekyll theme is pretty clean, and very open to custom styling.  I decided to get inspired by other &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll themes&lt;/a&gt;, and used a different theme as a starting point.  &lt;a href=&quot;https://github.com/bencentra/centrarium&quot;&gt;Centrarium&lt;/a&gt;, by fellow RIT alumni &lt;a href=&quot;http://bencentra.com/&quot;&gt;Ben Centra&lt;/a&gt;, is the theme I am using for now and will probably continue to tweak and use.  Nice work, Ben!&lt;/p&gt;

&lt;p&gt;He’s got some other cool technologies integrated with the theme, including &lt;a href=&quot;http://bourbon.io/&quot;&gt;Bourbon&lt;/a&gt; and &lt;a href=&quot;http://neat.bourbon.io/&quot;&gt;Neat&lt;/a&gt; styling, and a cool Jekyll plugin called &lt;a href=&quot;https://github.com/jekyll/jekyll-archives&quot;&gt;jekyll-archives&lt;/a&gt;.  More on this and integration, next.&lt;/p&gt;

&lt;h4 id=&quot;github-integration&quot;&gt;GitHub Integration&lt;/h4&gt;

&lt;p&gt;GitHub offers a service called &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.  Every account is allotted one page, and every project is allotted one project page.  There’s slight differences between the two in terms of your git repository structure.  In short, a project page utilizes a separate branch &lt;code&gt;gh-pages&lt;/code&gt;, while an account page simply looks at the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;Here’s the challenge I faced.&lt;/p&gt;

&lt;p&gt;Ben’s inclusion of &lt;a href=&quot;https://github.com/jekyll/jekyll-archives&quot;&gt;jekyll-archives&lt;/a&gt; is awesome, and provides many useful features such as improved tagging and page generation for tags and categories.  However, GitHub Pages uses their own safe-mode of &lt;code&gt;jekyll build&lt;/code&gt; that disables plugins.  Therefore, a simple push to my master branch on my GitHub repository would not generate the archive pages and was insufficient.  After much research, I’ve found a solution I can accept.&lt;/p&gt;

&lt;p&gt;I’ve created a second branch called &lt;code&gt;development&lt;/code&gt; that I will use for my Jekyll files, templates, etc.  The Jekyll output, which goes to a folder called &lt;code&gt;_site&lt;/code&gt;, will be what lives in the &lt;code&gt;master&lt;/code&gt; branch of my repo, since GitHub Pages is happy to serve already static pages (no &lt;code&gt;jekyll build&lt;/code&gt; needed).&lt;/p&gt;

&lt;p&gt;Here’s how development looks on my local machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;md&quot;&gt;.
├── development
|   ├── _config.yml
|   └── ... (jekyll files)
├── master
|   ├── index.html
|   ├── ... (static files)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My development folder points strictly to the &lt;code&gt;development&lt;/code&gt; branch, and master simply to the &lt;code&gt;master&lt;/code&gt; branch.  I do all my work on the development branch.  When I’m ready to push something new to master, I do a &lt;code&gt;jekyll build&lt;/code&gt; and copy the contents of &lt;code&gt;_site&lt;/code&gt; in development to master.&lt;/p&gt;

&lt;p&gt;To simplify this deploy process, I’ve written a simple shell script.  You can &lt;a href=&quot;https://github.com/bcole/bcole.github.io/blob/development/_deploy.sh&quot;&gt;check it out&lt;/a&gt; on this site’s repository.  After tweaking the site or adding a new post, I can verify it via &lt;code&gt;jekyll serve&lt;/code&gt; in the development folder, and when I’m sure things look good, I execute a simple &lt;code&gt;./_deploy.sh&lt;/code&gt; to push to master and to &lt;a href=&quot;/&quot;&gt;bcole.github.io&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;

&lt;p&gt;I’m excited to start writing some actual content.  Stay tuned for updates, subscribe via RSS (do people actually use RSS?), and leave comments below!&lt;/p&gt;

</description>
        <pubDate>Wed, 23 Sep 2015 06:19:55 -0700</pubDate>
        <link>http://bcole.github.io/blog/2015/09/23/blog-init.html</link>
        <guid isPermaLink="true">http://bcole.github.io/blog/2015/09/23/blog-init.html</guid>
        
        <category>blog</category>
        
        <category>meta</category>
        
        <category>welcome</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
